SSToPer, Linux SSTP client


What is SSTP ?
--------------

Wikipedia says:
"Secure Socket Tunneling Protocol (SSTP) is a form of VPN tunnel that provides a
mechanism to transport PPP or L2TP traffic through an SSL 3.0 channel. SSL
provides transport-level security with key-negotiation, encryption and traffic
integrity checking. The use of SSL over TCP port 443 allows SSTP to pass through
virtually all firewalls and proxy servers."
http://en.wikipedia.org/wiki/Secure_Socket_Tunneling_Protocol


What is SSToPer ?
--------------------

A Linux implementation for SSTP client, which is embedded by default in
Microsoft Windows Vista and Seven, used to establish VPN communication 
with Microsoft Server 2008 and above. Since SSTP is only a wrapper over PPP
communication, pppd (http://ppp.samba.org/) MUST be installed with the
synchronous HDLC serial encoding capability enabled.


Features:
---------

- Establishes PPP based VPN through SSTP
- Proxy 
- HMAC-256 support
- Wireshark SSTP dissector provided to analyse SSTP behaviour


Pre-requisites:
---------------

- libcrypto (for hmac.h)
- libgnutls (for gnutls.h and other)
- libbsd (for util.h)
- HDLC-sync capable pppd must be installed
- root privileges


Todo:
-----

- IPv6 support (should be working, to test)
- HMAC-160 support (should be working, to test)
- Certification validation



Installing Wireshark SSTP dissector:
------------------------------------

* Download Wireshark source from http://www.wireshark.org and un-tar archive
* Add "dissectors/packet-sstp.c" in DISSECTOR_SRC section inside `epan/CMakeLists.txt` file
* Add "packet-sstp.c" in DISSECTOR_SRC section inside `epan/dissectors/Makefile.common` file
* Copy sstoper/misc/packet-sstp.c -> wireshark/epan/dissectors/
* In wireshark/ root directory, execute :
{{{
   $ ./autogen.sh && ./configure --with-ssl && make
}}}
* You now have a SSTP-compliant Wireshark version (a simple SSTP negociation
  PCAP file is provided in misc/ directory) which can be started
{{{
   $ sudo ./wireshark  
}}}


SSTP Session example:
---------------------
- first you need your server PEM-formatted CA file. It can usually be obtained
  like this:
  -> Go to http://<server>/certsrv
     -> Click on "Download a CA certificate, certificate chain, or CRL" link
     -> Select "Base64" as "Encoding method" option
     -> Click on "Download CA certificate" link

- un-tar and compile sstoper
{{{
$ tar xf sstoper.tar.gz
$ cd sstoper && make 
}}}

- execute
{{{
$ sudo ./sstoper -s server -c server.crt -U user -P pass
[!] Using default value: 443.
[!] Using default value: /usr/sbin/pppd.
Connecting to vpn.tweety.looney:443
2010-10-31 12:04:39  [!] Using default value: 443
2010-10-31 12:04:39  [!] Using default value: /usr/sbin/pppd
Connecting to vpn.tweety.looney:443 
SSTP link established

(Hit Ctrl-C to close connection)

^C2010-10-31 12:13:00  [-] sstp_loop: Interrupted system call
Waiting for /usr/sbin/pppd process (PID:6226) to end
$ 
}}}

Incrementing verbose option (0-3) will display more connection events.

Actually working on Linux, other system to be supported.


Thanks:
-------
- Nicolas Collignon and HSC consultants


Comments/Bugs:
--------------
Please send me back comments and bugs to <ca __AT__ hsc __DOT__ fr> with
backtrace (using sstoper -vvv options) and/or an strace output of the bug.

Thanks !
